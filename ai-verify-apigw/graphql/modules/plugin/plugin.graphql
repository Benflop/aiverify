# enum PluginComponentType {
#     Algorithm
#     InputWidget
#     ReportWidget
# } 

# type ComponentDependency {
#     type: PluginComponentType! # component type
#     gid: String! # gid of component
#     version: String! # version of component
# }

# type UserDefinedProperty {
#     key: String!
#     helper: String # recommended to inform user use of the property
#     default: String 
#     enum: [String] # array of values 
# }

# type WidgetSize {
#     maxW: Int
#     maxH: Int
#     minW: Int
#     minH: Int
#     defaultW: Int
#     defaultH: Int
# }

interface BasePluginComponent {
    mdxPath: String! # path to file, relative to plugins dir
	gid: String! # <plugin gid>:<component id>
    cid: String! # component id
	pluginGID: String! # reference plugin gid
    name: String! # component name
    description: String
    tags: [String]
}

# type ReportWidget implements BasePluginComponent {
#     mdxPath: String! # path to file, relative to plugins dir
# 	gid: String! # <plugin gid>:<component id>
#     cid: String! # component id
# 	pluginGID: String! # reference plugin gid
#     name: String! # component name
#     description: String
#     tags: [String]
#     dependencies: [ComponentDependency]
#     properties: [UserDefinedProperty]
#     widgetSize: WidgetSize
# }

# type InputBlock implements BasePluginComponent {
#     mdxPath: String! # path to file, relative to plugins dir
# 	gid: String! # <plugin gid>:<component id>
#     cid: String! # component id
# 	pluginGID: String! # reference plugin gid
#     name: String! # component name
#     description: String
#     tags: [String]
#     group: String
# }

type Algorithm implements BasePluginComponent {
    mdxPath: String! # path to file, relative to plugins dir
	gid: String! # <plugin gid>:<component id>
    cid: String! # component id
	pluginGID: String! # reference plugin gid
    name: String! # component name
    description: String
    tags: [String]
    inputSchema: JSON # input json schema
    outputSchema: JSON # output json schema
    requirements: [String] # python package requirements
}

# type AIFPlugin {
#     gid: String! # plugin global id
#     version: String!
#     name: String!
#     description: String
#     author: String
#     tags: [String]
#     reportWidgets: [ReportWidget] # // store gids of report widgets
# }

