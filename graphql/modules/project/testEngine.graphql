type TestInformation {
	algorithmGID: String # GID of algorithm
	# modelDataset?: Model;
	# testDataset?: Dataset;
	# groundTruthDataset?: Dataset;
	# groundTruth?: DatasetColumn; // ground truth column
	# isTestArgumentsValid: Boolean # whether test arguments is valid
  testArguments: JSON # arguments filled in by users
}

input TestInformationInput {
	algorithmGID: String @constraint(minLength: 1, maxLength: 128) # GID of algorithm
	# isTestArgumentsValid: Boolean # whether test arguments is valid
  testArguments: JSON # arguments filled in by users
}

enum TestEngineTaskStatus {
	Pending
	Running
	Cancelled # cancelled by user
	Success
	Error
}

type ErrorMessage {
  id: ObjectID!
  code: String
  severity: String!
  description: String!
}

type TestEngineTask {
	algorithmGID: String! # GID of algorithm
	algorithm: Algorithm
	testArguments: JSON # snapshot of test arguments
	status: TestEngineTaskStatus!
	progress: Int! # progress in percentage
	timeStart: DateTime
  timeTaken: Int # in seconds
	output: JSON
	errorMessages: [ErrorMessage]
}