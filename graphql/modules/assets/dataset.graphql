enum DatasetAccessType {
  File
  Folder
}

enum DatasetStatusType {
  Pending
  Valid
  Invalid
  Error
  Cancelled
}

type DatasetColumn {
  id: ObjectID!
  name: String!
  datatype: String!
  label: String
  # sensitive: Boolean
}

type Dataset {
  id: ObjectID!
  filename: String!
  name: String!
  filePath: String!
  type: DatasetAccessType!
  ctime: DateTime
  dataColumns: [DatasetColumn]
  numRows: Int
  numCols: Int
  description: String
  status: DatasetStatusType
  size: String
  serializer: String
  dataFormat: String
  errorMessages: String
}

# input DatasetColumnInput {
#   id: ObjectID
#   label: String @constraint(minLength: 1, maxLength: 128)
#   sensitive: Boolean
#   name: String @constraint(minLength: 1, maxLength: 128)
#   datatype: String
# }


input DatasetInput {
  # id: ObjectID
  # filename: String @constraint(minLength: 1, maxLength: 256)
  name: String @constraint(minLength: 0, maxLength: 128)
  # filePath: String @constraint(minLength: 1, maxLength: 256)
  # type: DatasetAccessType
  # ctime: DateTime
  # dataColumns: [DatasetColumnInput]
  # numRows: Int
  # numCols: Int
  description: String @constraint(minLength: 0, maxLength: 256)
  status: DatasetStatusType
  # size: String
  # serializer: String
  # dataFormat: String
  # errorMessages: String
}


type Query {
  # return list of files
  datasets: [Dataset]
}

type Mutation {
  # delete files
  deleteDataset(id: ObjectID!): ObjectID
  updateDataset(datasetID: ObjectID!, dataset: DatasetInput): Dataset
}

type DatasetStatusUpdate {
  _id: String
  filename: String
  status: DatasetStatusType
  serializer: String
  dataFormat: String
  dataColumns: [DatasetColumn]
  numRows: Int
  numCols: Int
  errorMessages: String
}

type Subscription {
	validateDatasetStatusUpdated: DatasetStatusUpdate 
}