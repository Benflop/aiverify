# Pre-merge Checks (for Nodejs/Typescript projects)
# 1. Unit tests with code coverage (jest)
# 2. Code quality analysis (lint)
# 3. Dependency analysis (vulnerabilities)
# 4. Dependency analysis (undesirable licenses)
# 5. Deploy reports generated from the above to GitHub Pages

## support monorepo

name: Pre-Merge Checks (ai-verify-apigw)

on:
  # Runs on pull request to main
  pull_request:
    branches: [master, main]
    paths:
      - 'ai-verify-apigw/**'

  # Run this workflow manually from Actions tab
  workflow_dispatch:

# Sets permissions of GITHUB_TOKEN
permissions:
  contents: write
  pages: write
  pull-requests: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: ${{ github.repository }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  # Single deploy job since we're just deploying
  pre-merge-checks:
#    environment:
#      name: github-pages
#      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
#      - name: Add label to PR
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          PR: ${{ github.event.pull_request.html_url }}
#        run: |
#          gh pr edit $PR --add-label 'ai-verify-apigw'

      # Checkout code
      - name: Checkout code
        run: |
          set +e
          git config --global init.defaultBranch main
          git init
          git branch -m main
          git remote add origin https://github.com/IMDA-BTG/aiverify.git
          git config --local gc.auto 0
          authToken="x-access-token:${{ secrets.GITHUB_TOKEN }}"
          encodedAuthToken=$(echo -n "$authToken" | base64 -w0)
          git config --local http.https://github.com/.extraheader "AUTHORIZATION: basic ${encodedAuthToken}"
          git -c protocol.version=2 fetch --no-tags --prune --progress --no-recurse-submodules --depth=1 origin +${{github.sha}}:refs/remotes/origin/main
          git sparse-checkout init
          git sparse-checkout set ai-verify-apigw _site
          git checkout --progress --force -B master refs/remotes/origin/main
          ls -l
          set -e

      # Install dependencies
      - name: Setup npm cache/install
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: ai-verify-apigw

      - name: Install dependencies
        working-directory: ${{ github.workspace }}/ai-verify-apigw
        if: always()
        run: |
          npm install
          npm i -D jest jest-html-reporter jest-json-reporter ts-jest @jest/globals badge-maker
          npm i -D eslint eslint-formatter-html @typescript-eslint/eslint-plugin @typescript-eslint/parser

      # Unit Tests & Coverage
      - name: Unit tests with coverage
        working-directory: ${{ github.workspace }}/ai-verify-apigw
        if: always()
        timeout-minutes: 5
        run: |
          set +e
          npm run coverage
          exit_code_jest=$?
          node ci/createBadges.mjs test
          node ci/createBadges.mjs coverage
          set -e
          if [ $exit_code_jest -ne 0 ]; then
            echo "jest failed, exiting..."
            exit $exit_code_jest
          fi

      # eslint
      - name: Code quality analysis - lint
        working-directory: ${{ github.workspace }}/ai-verify-apigw
        if: always()
        run: |
          set +e
          npx eslint -f html -o eslint-report.html .
          exit_code_lint=$?
          npx eslint -f json -o eslint-report.json .
          node ci/createBadges.mjs lint
          set -e
          if [ $exit_code_lint -ne 0 ]; then
            echo "lint failed, exiting..."
            exit $exit_code_lint
          fi

      # npm audit
      - name: Dependency analysis - vulnerabilities & licenses
        working-directory: ${{ github.workspace }}/ai-verify-apigw
        if: always()
        run: |
          set +e
          npm audit --json | npx npm-audit-markdown --output npm-audit-report.md
          exit_code_audit=$?
          npx markdown-to-html-cli --source npm-audit-report.md --output npm-audit-report.html -y
          npx license-checker --summary --out licenses-found.txt -y
          node ci/createBadges.mjs dependency
          echo -e "License Check Summary for apigw\n" | cat - licenses-found.txt > license-report.txt          
          node ci/createBadges.mjs license
          set -e
          if [ $exit_code_audit -ne 0 ]; then
            echo "npm audit failed, exiting..."
            exit $exit_code_audit
          fi

       ### Publish reports to ci dashboard ###
      - name: Checkout dashboard
        if: always()
        uses: actions/checkout@v3
        with:
          repository: IMDA-BTG/ci-dashboard
          token: ${{ secrets.CHECKOUT_TOKEN }}
          ref: main
          path: check-results

      - name: Push results to dashboard
        if: always()
        working-directory: ${{ github.workspace }}/check-results
        run: |
          set +e
          mkdir -p docs/pre-merge/apigw
          mv ../ai-verify-apigw/coverage docs/pre-merge/apigw/
          mv ../ai-verify-apigw/*.svg docs/pre-merge/apigw/
          mv ../ai-verify-apigw/*.html docs/pre-merge/apigw/
          mv ../ai-verify-apigw/*.md docs/pre-merge/apigw/
          mv ../ai-verify-apigw/*.txt docs/pre-merge/apigw/
          git add *
          git config user.name "imda-btg"
          git config user.email "idma-btg@imda.gov.sg"
          git commit -m "feat(apigw) actions publish apigw reports to dashboard"
          git push
          set -e

#      - name: Prepare artifact
#        if: always()
#        run: |
#          set +e
#          mkdir -p _site/apigw
#          rm -rf _site/apigw/
#          mv ai-verify-apigw/coverage _site/apigw/
#          mv ai-verify-apigw/*.svg _site/apigw/
#          mv ai-verify-apigw/*.html _site/apigw/
#          mv ai-verify-apigw/*.md _site/apigw/
#          mv ai-verify-apigw/*.txt _site/apigw/
#          git branch -m main
#          git add _site/apigw
#          git config user.name "imda-btg"
#          git config user.email "idma-btg@imda.gov.sg"
#          git commit -m "feat(apigw): actions publish apigw reports to pages"
#          git config --unset-all http.https://github.com/.extraheader
#          authToken="x-access-token:${{ secrets.GITHUB_TOKEN }}"
#          encodedAuthToken=$(echo -n "$authToken" | base64 -w0)
#          git config --local http.https://github.com/.extraheader "AUTHORIZATION: basic ${encodedAuthToken}"
#          git push origin main
#          set -e
#
#      - name: Upload artifact
#        if: always()
#        uses: actions/upload-pages-artifact@v1
#
#      - name: Publish artifact to Pages
#        if: always()
#        id: deployment
#        uses: actions/deploy-pages@v1
